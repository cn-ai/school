/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.24
 * Generated at: 2018-12-03 08:19:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages.show;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class show_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("\t\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t\t<title>首页</title>\r\n");
      out.write("\t\t<!-- plugins:css -->\r\n");
      out.write("\t\t<link rel=\"stylesheet\" href=\"../../vendors/iconfonts/mdi/css/materialdesignicons.min.css\">\r\n");
      out.write("\t\t<link rel=\"stylesheet\" href=\"../../vendors/css/vendor.bundle.base.css\">\r\n");
      out.write("\t\t<!-- endinject -->\r\n");
      out.write("\t\t<!-- inject:css -->\r\n");
      out.write("\t\t<link rel=\"stylesheet\" href=\"../../css/style.css\">\r\n");
      out.write("\t\t<!-- endinject -->\r\n");
      out.write("\t\t<link rel=\"shortcut icon\" href=\"../../../../images/favicon.png\" />\r\n");
      out.write("\t</head>\r\n");
      out.write("\r\n");
      out.write("\t<body style=\"padding: 10px;width: 1000px;\" onload=\"showDT()\">\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"page-header  border-bottom\" style=\"padding-bottom: 5px;\">\r\n");
      out.write("\t\t\t<h3 class=\"page-title\">\r\n");
      out.write("              <span class=\"page-title-icon bg-gradient-primary text-white mr-2\">\r\n");
      out.write("                <i class=\"mdi mdi-home\"></i>                 \r\n");
      out.write("              </span>\r\n");
      out.write("              \t首页\r\n");
      out.write("            </h3>\r\n");
      out.write("            <blockquote class=\"blockquote float-right rard\" style=\"width: 290px;padding: 5px;margin-right: 20px;\">\r\n");
      out.write("\t\t\t\t<h4 id=\"theClock\" class=\"mb-0 ml-1 text-danger\" style=\"text-align: center;\">\r\n");
      out.write("\t            </h4>\r\n");
      out.write("\t\t\t</blockquote>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<img  src=\"../../images/timg (2).jpg\" width=\"99%\" height=\"260\" style=\"margin-bottom: 5px;\"/>\r\n");
      out.write("\t\t<blockquote class=\"blockquote blockquote-primary\" style=\"margin: auto;width: 568px;\">\r\n");
      out.write("\t\t\t<h3 class=\"mb-0 ml-1 text-info\" style=\"text-align: center;\">\r\n");
      out.write("                        <i class=\"mdi mdi-compass icon-md text-success\"></i>\r\n");
      out.write("                        \t我的办公\r\n");
      out.write("            </h3>\r\n");
      out.write("\t\t\t<button type=\"button\" class=\"btn btn-outline-danger btn-icon-text\" style=\"margin-right: 18px;width: 160px;margin-top: 10px;\" onclick=\"Switch('one')\">\r\n");
      out.write("                <i class=\"mdi mdi-run btn-icon-prepend\"></i>                                                    \r\n");
      out.write("              \t请假\r\n");
      out.write("            </button>\r\n");
      out.write("\t\t\t<button type=\"button\" class=\"btn btn-outline-warning btn-icon-text\" style=\"margin-right: 18px;width: 160px;margin-top: 10px;\" onclick=\"Switch('two')\">\r\n");
      out.write("                <i class=\"mdi mdi-food btn-icon-prepend\"></i>                                                    \r\n");
      out.write("                                申请报销\r\n");
      out.write("            </button>\r\n");
      out.write("\t\t\t<button type=\"button\" class=\"btn btn-outline-info btn-icon-text\" style=\"width: 160px;margin-top: 10px;\" onclick=\"Switch('three')\">\r\n");
      out.write("                <i class=\"mdi mdi-send btn-icon-prepend\"></i>                                                    \r\n");
      out.write("               \t发送信件\r\n");
      out.write("           </button>\r\n");
      out.write("           <footer class=\"blockquote-footer\" style=\"margin-top: 15px;\">简单整理 不一样的你从<cite title=\"Source Title\" class=\"font-weight-bold\">工作开始</cite></footer>\r\n");
      out.write("\t\t</blockquote>\r\n");
      out.write("\r\n");
      out.write("\t</body>\r\n");
      out.write("\t<script src=\"/jboa/js/jquery-1.12.4.js\"></script>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tvar days=new  Array (\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\");  \r\n");
      out.write("\t\tfunction showDT() {  \r\n");
      out.write("\t\t  var currentDT = new Date();  \r\n");
      out.write("\t\t  var y,m,date,day,hs,ms,ss,theDateStr;  \r\n");
      out.write("\t\t  y = currentDT.getFullYear(); //四位整数表示的年份  \r\n");
      out.write("\t\t  m = currentDT.getMonth()+1; //月  \r\n");
      out.write("\t\t  date = currentDT.getDate(); //日  \r\n");
      out.write("\t\t  day = currentDT.getDay(); //星期  \r\n");
      out.write("\t\t  hs = currentDT.getHours(); //时  \r\n");
      out.write("\t\t  ms = currentDT.getMinutes(); //分  \r\n");
      out.write("\t\t  ss = currentDT.getSeconds(); //秒  \r\n");
      out.write("\t\t  theDateStr = y+\"年\"+  m +\"月\"+date+\"日  星期\"+days[day]+\"  \"+hs+\":\"+ms+\":\"+ss;  \r\n");
      out.write("\t\t  document.getElementById(\"theClock\"). innerHTML =theDateStr;  \r\n");
      out.write("\t\t  // setTimeout 在执行时,是在载入后延迟指定时间后,去执行一次表达式,仅执行一次  \r\n");
      out.write("\t\t  window.setTimeout( showDT, 1000);  \r\n");
      out.write("\t\t}  \r\n");
      out.write("\t\tfunction Switch(text){\r\n");
      out.write("\t\t\tswitch(text){\r\n");
      out.write("\t\t\t\tcase 'one':\r\n");
      out.write("\t\t\t\t\twindow.location=\"\";\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\tcase 'two':\r\n");
      out.write("\t\t\t\t\twindow.location=\"\";\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\tcase 'three':\r\n");
      out.write("\t\t\t\t\twindow.location=\"\";\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
